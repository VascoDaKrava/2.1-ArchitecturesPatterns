// Автор - Кравчук Василий

#region 1. Accidental complexity - не нашёл у себя
// Использование излишней сложности и пустых проверок

#endregion

#region 2. Analytic paralysis
// Постоянный анализ, вместо реализаци

// В прошлое обучение остановился на курсе FPS. ОЧень долго продумывал, как всё должно выглядеть и как оно должно работать.
// В итоге не успел в сроки сдать работу и большую часть работы не сделал вовсе.
#endregion

#region 3. Bike-shed
// Пустые обсуждения

// Бывало, что тратил много времени на поиск моделей, шрифта, звуков. Затем на выбор цвета, уровня громкости.
// При этом не успевал сделать основную задачу.
#endregion

#region 4. Blind faith
// Отсутствие проверок данных

// Например, в последнем моём проекте RollBall.
// В классе, который готовит ссылки, не учтена ситуация, при которой ссылки могут быть пустыми.
#endregion

#region 5. Boat anchor
// Сохранение неиспользуемого кода

// В первых моих проектах осталось много закомментированного кода.
// В проекте курса "Разработка 3D-игр" по какой-то причине не работала проверка поверхности под игроком для прыжка.
// Но код самой проверки оставлен "на потом".
#endregion

#region 6. Copy and Paste Programming
// Повторение кода

// Скрипт управления камерой копирую из предыдущих проектов. С минимальными изменениями.
#endregion

#region 7. False mastery
// Остановка самосовершенствования

// Пока не страдаю таким - слишком мало знаю)
#endregion

#region 8. Fear of adding classes
// Боязнь создавать большое количество классов

// В первых проектах обходился десятком классов.
// Классы типа PlayerMoving отвечали за перемещение игрока, считываение ввода, нанесения ущерба игроку и т.д.
#endregion

#region 9.Fear of complexity
// Боязнь использования более сложных решений

// Есть боязнь использования непонятного. Стараюсь не использовать чужие работающие решения, которых не понимаю или которые понять не просто.
// Например, избегаю рекурсий и сворачиваний в лямбды.
#endregion

#region 10. God object
// Использование класса, который контроллирует много других классов и имеет много ответственности

// В первом проекте курса "Введение в Unity" для игрока использовал класс PlayerInteraction.
// В нём прописана логика всех взаимодействия игрока с чем-либо и всего с игроком, обработка управления и движение камеры.
// Класс содержит более 300 строк кода, отвечающего за разные ответственности.
#endregion

#region 11. Golden hammer - не нашёл у себя
// Использование одного универсального решения

#endregion

#region 12. Hard code
// Фиксация в коде различных данных об окружении

// Все проекты писал под ПК с управлением клавиатурой и мышью
// В шуттере, в классах управления стрельбой, масса, длина и диаметр/калибр пуль задаются кодом.
// При замене моделей пуль на другие, эти данные будут уже ошибочны, а найти и изменить их будет не просто.
#endregion

#region 13. Lava flow
// Написание слабопонятных неподдерживаемых кусков кода

// В первых проектах недостаточно подробно описывал в комментариях свои решения.
// Спустя пол года уже сложно вспомнить как оно работает и почему сделал именно так.
#endregion

#region 14. Magic numbers and lines - не использую такого
// Использование непонятных чисел и строк

// Все строки и числа выношу в поля.
// Для строковых значений делаю отдельный класс или несколько классов.
#endregion

#region 15. Poltergeist
// Наличие неиспользуемых объектов / классов

// Бывает такое, когда использую чужой код.
// Например на курсе "Разработка 3D-игр" добавил стороннюю воду с шейдерами и кучей непонятых классов, которые, скорее всего не используются.
#endregion

#region 16. Programming by permutation
// Решение проблем перебором / подбором

// На курсе "Введение в Unity" не смог разобраться с прохождением пуль сквозь стену.
// В итоге, подобрал множитель для рассчёта длины рейкаста перед пулей, который проверяет наличие и тип преграды перед пулей в следующем кадре.
#endregion

#region 17. Ravioli code - не нашёл у себя такого
// Разбиение на слишком большое количество классов

#endregion

#region 18. Reinventing the square wheel
// Создание своего плохого решения

// Управление камерой написал сам, вместо использования кинемашины.
// При этом камера, следующая за игроком может проваливаться за текстуры, быть за объектами и не показывать игрока.
#endregion

#region 19. Reinventing the wheel
// Создание своего решения вместо уже созданного

// Скорее всего использую такое, но не знаю где
#endregion

#region 20. Soft code
// Добавление излишней возможности конфигурирования

// Стараюсь отдавать в инспектор через сериализуемое поле только минимум настроек.
// Остальное задавать приватными полями в коде или в отдельном классе или файле с настройками.
#endregion

#region 21. Spaghetti code
// Плохо структурированный код, использование одного большого класса или метода

// В первых проектах было много такого кода. Или даже весь код был под этим антипаттерном.
// После вникания в MVC/MVP/MVx спагетти, скорее всего, отсутствуют.
#endregion

#region 22. Too many managers - не нашёл у себя
// Слишком много управляющих классов, которые могут управлять другими менеджерами

#endregion

#region 23. Vendor lock-in - не нашёл у себя
// Использование неподдерживаемых продуктов других разработчиков

#endregion